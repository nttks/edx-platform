# -*- coding: utf-8 -*-
import json
import logging
import os
from contextlib import contextmanager
from datetime import datetime
from exceptions import OSError
from functools import wraps

from django.conf import settings
from django.http import HttpResponse, HttpResponseForbidden

from boto.exception import S3ResponseError
from boto.s3 import connect_to_region
from boto.s3.connection import OrdinaryCallingFormat, Location
from boto.s3.key import Key
from bson import ObjectId
from courseware.access import has_access, GA_ACCESS_CHECK_TYPE_ANALYZER
from util.file import course_filename_prefix_generator
from util.json_request import JsonResponse

from student.models import CourseAccessRole

log = logging.getLogger(__name__)
RESPONSE_FIELD_ID = 'right_content_response'


def staff_only(view_func):
    """Prevent invasion from other roll's user."""

    def _wrapped_view_func(request, *args, **kwargs):
        if not request.user.is_staff:
            return JsonResponse({}, status=403)
        return view_func(request, *args, **kwargs)

    return _wrapped_view_func


def ga_analyzer_only(view_func):
    """Prevent invasion from other roll's user."""

    def _wrapped_view_func(request, *args, **kwargs):
        if not request.user.is_superuser and not has_access(request.user, GA_ACCESS_CHECK_TYPE_ANALYZER, 'global'):
            return JsonResponse({}, status=403)
        return view_func(request, *args, **kwargs)

    return _wrapped_view_func


def get_s3_bucket(conn, bucket_name):
    """Return AWS S3 Bucket Object"""
    try:
        bucket = conn.get_bucket(bucket_name)
    except S3ResponseError:
        bucket = conn.create_bucket(bucket_name)
    return bucket


def get_s3_connection():
    """Return AWS S3 Connection Object"""
    return connect_to_region(
        Location.APNortheast,
        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
        is_secure=True,
        calling_format=OrdinaryCallingFormat(),
    )


def handle_file_from_s3(key_name, bucket_name):
    with open_bucket_from_s3(bucket_name) as bucket:
        key = bucket.get_key(key_name)
        if key and key.exists():
            return key
        else:
            return None


def handle_uploaded_received_file_to_s3(file_obj, key_name, bucket_name):
    """Send received files to AWS S3"""
    with open_bucket_from_s3(bucket_name) as bucket:
        f_s3 = Key(bucket)
        f_s3.key = key_name
        f_s3.set_contents_from_file(file_obj)
        return f_s3


def handle_uploaded_generated_file_to_s3(file_path_list, bucket_name):
    """Send files to AWS S3 which generated by local"""
    upload_file_path_list = []
    date_str = datetime.now().strftime("%Y%m%d-%H-%M-%S") + "/"
    with open_bucket_from_s3(bucket_name) as bucket:
        for file_path in file_path_list:
            f_s3 = Key(bucket)
            f_s3.key = date_str + file_path.split("/")[-1]
            f_s3.set_contents_from_filename(file_path)
            upload_file_path_list.append(
                f_s3.generate_url(expires_in=0, query_auth=False, force_http=True)
            )
    return upload_file_path_list


@contextmanager
def open_bucket_from_s3(bucket_name):
    conn = None
    try:
        conn = get_s3_connection()
        bucket = get_s3_bucket(conn, bucket_name)
        yield bucket
    finally:
        if conn:
            conn.close()


def delete_files(file_name_list, base_dir):
    """Delete files from local storage."""
    for file_name in file_name_list:
        try:
            os.remove(base_dir + "/" + file_name)
        except OSError:
            log.exception('File remove was failed')


@contextmanager
def change_behavior_sys(input_func):
    import sys
    import __builtin__

    def exit_dummy(_):
        pass

    tmp_exit = tmp_stderr = tmp_stdout = tmp_raw_input = None
    try:
        with open(settings.GA_OPERATION_STD_ERR, 'w') as err, open(settings.GA_OPERATION_STD_OUT, 'w') as out:
            tmp_exit = sys.exit
            sys.exit = exit_dummy
            tmp_stderr = sys.stderr
            sys.stderr = err
            tmp_stdout = sys.stdout
            sys.stdout = out
            tmp_raw_input = __builtin__.raw_input
            __builtin__.raw_input = input_func()
            yield
    finally:
        if tmp_exit:
            sys.exit = tmp_exit
        if tmp_stderr:
            sys.stderr = tmp_stderr
        if tmp_stdout:
            sys.stdout = tmp_stdout
        if tmp_raw_input:
            __builtin__.raw_input = tmp_raw_input


def get_dummy_raw_input():
    x = [-1]

    def counter(_):
        x[0] += 1
        return x[0]

    return counter


def get_dummy_raw_input_list(input_list):
    input_list.reverse()

    def wrapper():
        x = input_list.pop() if input_list else ''

        def counter():
            return x

        return counter

    return wrapper


def get_std_info_from_local_storage():
    with open(settings.GA_OPERATION_STD_ERR, 'r') as err, open(settings.GA_OPERATION_STD_OUT, 'r') as out:
        err_msg, out_msg = err.read(), out.read()
    return err_msg, out_msg


def course_filename(course_key):
    return course_filename_prefix_generator(course_key, '-')


class CSVResponse(HttpResponse):
    """ Return to csv response. """

    def __init__(self, filename, *args, **kwargs):
        super(CSVResponse, self).__init__(content_type='text/csv', *args, **kwargs)
        self['Content-Disposition'] = 'attachment; filename={}'.format(filename)


class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        if isinstance(o, datetime):
            return o.isoformat()
        return json.JSONEncoder.default(self, o)


class JSONFileResponse(JsonResponse):
    """ Return to json file response. """

    def __init__(self, resp_obj=None, filename=None, encoder=JSONEncoder, *args, **kwargs):
        super(JSONFileResponse, self).__init__(resp_obj=resp_obj, encoder=encoder, *args, **kwargs)
        self['Content-Disposition'] = 'attachment; filename={}'.format(filename)


def handle_operation(form_class, has_file=False):
    def _handle_operation(view_func):
        @wraps(view_func)
        def wrapper(request):
            try:
                f = form_class(data=request.POST, files=request.FILES) if has_file else form_class(data=request.POST)
                if not f.is_valid():
                    f.errors[RESPONSE_FIELD_ID] = u'入力したフォームの内容が不正です。'
                    log.info(f.errors)
                    return JsonResponse(f.errors, status=400)
                return view_func(request, f)
            except Exception as e:
                log.exception('Caught the exception: {}'.format(type(e).__name__))
                return JsonResponse({
                    RESPONSE_FIELD_ID: "{}".format(e)
                }, status=500)
            finally:
                log.info('path:{}, user.id:{} End.'.format(request.path, request.user.id))
        return wrapper
    return _handle_operation


def authority_check(view_func):
    """ lms/ga_operation/views/ga_operation_dashboard/ga_operation_user_dashboard
        Prevent invasion from other roll's user."""
    def _wrapped_view_func(request, *args, **kwargs):
        if request.user.is_staff:
            return view_func(request, *args, **kwargs)
        else:
            studio_user_count = CourseAccessRole.objects.filter(user=request.user,
                                                                role__in=['instructor', 'staff']).count()
            if not studio_user_count:
                return HttpResponseForbidden()
            return view_func(request, *args, **kwargs)

    return _wrapped_view_func
